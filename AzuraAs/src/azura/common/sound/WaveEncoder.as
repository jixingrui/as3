package azura.common.sound{	import flash.utils.ByteArray;	import flash.utils.Endian;		public class WaveEncoder 	{		private static const RIFF:String = "RIFF";			private static const WAVE:String = "WAVE";			private static const FMT:String = "fmt ";			private static const DATA:String = "data";					private static  var _volume:Number=1;		private static  var channels:int=1;		private static  var bits:int=16;		private static  var rate:int=44100;//		private static  var rate:int=48000;						public static function encode( samples:ByteArray):ByteArray		{			samples.position = 0;						var data:ByteArray = create( samples );						var _bytes:ByteArray=new ByteArray();			_bytes.length = 0;			_bytes.endian = Endian.LITTLE_ENDIAN;						_bytes.writeUTFBytes( WaveEncoder.RIFF );			_bytes.writeInt( uint( data.length + 44 ) );			_bytes.writeUTFBytes( WaveEncoder.WAVE );			_bytes.writeUTFBytes( WaveEncoder.FMT );			_bytes.writeInt( uint( 16 ) );			_bytes.writeShort( uint( 1 ) );			_bytes.writeShort( channels );			_bytes.writeInt( rate );			_bytes.writeInt( uint( rate * channels * ( bits >> 3 ) ) );			_bytes.writeShort( uint( channels * ( bits >> 3 ) ) );			_bytes.writeShort( bits );			_bytes.writeUTFBytes( WaveEncoder.DATA );			_bytes.writeInt( data.length );			_bytes.writeBytes( data );			_bytes.position = 0;						return _bytes;		}						private static  function create( bytes:ByteArray ):ByteArray		{			var _buffer:ByteArray=new ByteArray();			_buffer.endian = Endian.LITTLE_ENDIAN;			_buffer.length = 0;						while( bytes.bytesAvailable ) 				_buffer.writeShort( bytes.readFloat() * (0x7fff * _volume) );			return _buffer;		}	}}