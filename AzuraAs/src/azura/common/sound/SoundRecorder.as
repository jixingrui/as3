package azura.common.sound{	import flash.events.Event;	import flash.events.SampleDataEvent;	import flash.media.Microphone;	import flash.media.SoundCodec;	import flash.utils.ByteArray;	import flash.utils.getTimer;		import fr.kikko.lab.ShineMP3Encoder;		import org.osflash.signals.Signal;
		public class SoundRecorder	{			private static var mic:Microphone;		private static var raw:ByteArray;		private static var startTime:Number;				private static function ensureMic():Microphone{			if(mic!=null)				return mic;						mic=Microphone.getMicrophone();						if(mic!=null){				mic.setSilenceLevel(0);				mic.rate=11;				mic.gain=50;//				mic.codec=SoundCodec.SPEEX;		//				mic.noiseSuppressionLevel=-30;//				mic.encodeQuality=6;			}						return mic;		}					public static function start():void		{			ensureMic();						if(mic==null){				return;			}else if(raw!=null){				return;			}						startTime = getTimer();						raw=new ByteArray();			mic.addEventListener(SampleDataEvent.SAMPLE_DATA, onSampleData);		}				private static function onSampleData(event:SampleDataEvent):void		{			while(event.data.bytesAvailable >= 4){				raw.writeFloat(event.data.readFloat());			}		}				public static function stop():SoundClip{			if(raw!=null){				mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, onSampleData);					var result:SoundClip=new SoundClip();				result.milliseconds=getTimer()-startTime;				result.data=raw;				result.data.position=0;				raw=null;				return result;			}else{				return null;			}		}			}}