<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark List component.  

@see spark.components.List

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 minWidth="115" minHeight="36" blendMode="normal"
			 alpha.disabled="0.5"> 
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.List")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For list, the skin itself is colorized but the individual parts are not. */
		static private const exclusions:Array = ["scroller", "background"];
		
		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
		static private const contentFill:Array = ["bgFill"];
		
		/**
		 * @private
		 */
		override public function get contentItems():Array {return contentFill};
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			if (getStyle("borderVisible") == true)
			{
				border.visible = true;
				background.left = background.top = background.right = background.bottom = 1;
				//scroller.minViewportInset = 1; // TODO: Having to comment this out is a bug see SDK-23653
			}
			else
			{
				border.visible = false;
				background.left = background.top = background.right = background.bottom = 0;
				//scroller.minViewportInset = 0; // TODO: Having to comment this out is a bug see SDK-23653
			}
			
			borderStroke.color = getStyle("borderColor");
			borderStroke.alpha = getStyle("borderAlpha");
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Defines the appearance of the the List's drop indicator.
		To customize the drop indicator appearance, create a custom ListSkin class. -->
		<fx:Component id="dropIndicator">
			<s:Group minWidth="2" minHeight="2" maxWidth="4" maxHeight="4" includeInLayout="false">
				<s:Rect left="2" right="2" top="0" bottom="0" radiusX="1" radiusY="1">
					<s:fill>
						<!--- Defines the color of the background. The default color is 0x888888. -->
						<s:SolidColor color="0x888888"/>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="0x686868" weight="1"/>
					</s:stroke>
				</s:Rect>
			</s:Group>
		</fx:Component>
	</fx:Declarations>
	
	<!-- border -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke id="borderStroke" weight="1"/>
		</s:stroke>
	</s:Rect>
	
	<!-- fill -->
	<!--- Defines the background appearance of the list-based component. -->
	<s:Rect id="background" left="1" right="1" top="1" bottom="1">
		<s:fill>
			<!--- Defines the color of the background. The default color is 0xFFFFFF. -->
			<s:SolidColor id="bgFill" color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>
	
	<!-- Just use a VScrollBar with a custom skin instead of the Scroller -->
	<s:VScrollBar left="0" right="0" top="0" bottom="0"
				  skinClass="azura.common.ui.chat.skins.LeftScrollBarSkin" viewport="{dataGroup}"/>
	
	<!--- The container for the data items. -->
	<s:DataGroup id="dataGroup" left="30" right="1" top="3" bottom="1" clipAndEnableScrolling="true"
				 itemRenderer="spark.skins.spark.DefaultItemRenderer">
		<s:layout>
			<s:VerticalLayout gap="1" horizontalAlign="contentJustify"/>
		</s:layout>
	</s:DataGroup>
	
	
</s:SparkSkin>